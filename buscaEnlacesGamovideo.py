import asyncio
import aiohttp
import string
import random

async def generate_combinations(length=60, num_combinations=100000):
    """
    Genera un n√∫mero limitado de combinaciones posibles de letras y n√∫meros de longitud especificada.
    
    Args:
        length (int): Longitud de la cadena generada.
        num_combinations (int): N√∫mero de combinaciones a generar.
    
    Returns:
        list: Lista de combinaciones generadas.
    """
    characters = string.ascii_lowercase + string.digits
    combinations = [''.join(random.choices(characters, k=length)) for _ in range(num_combinations)]
    return combinations

async def check_valid_domains(base_url, start, end, port=444, path="index.html", session=None):
    """
    Verifica qu√© subdominios en un rango no devuelven error al acceder.
    
    Args:
        base_url (str): La URL base sin los n√∫meros.
        start (int): El inicio del rango de n√∫meros.
        end (int): El final del rango de n√∫meros.
        port (int): El puerto a utilizar en las URLs.
        path (str): El path al archivo en las URLs.
        session (aiohttp.ClientSession): Sesi√≥n de aiohttp para realizar solicitudes.

    Returns:
        list: Una lista de URLs v√°lidas (c√≥digo HTTP 200).
    """
    valid_urls = []
    tasks = []

    for i in range(start, end + 1):
        domain = base_url.replace("XX", str(i))
        url = f"{domain}:{port}/{path}"
        tasks.append(check_domain(url, valid_urls, session))

    # Esperamos a que todas las solicitudes se completen
    await asyncio.gather(*tasks)
    return valid_urls

async def check_domain(url, valid_urls, session):
    """
    Realiza una solicitud HTTP para verificar si el dominio es v√°lido.

    Args:
        url (str): La URL a verificar.
        valid_urls (list): Lista para almacenar los dominios v√°lidos.
        session (aiohttp.ClientSession): La sesi√≥n de aiohttp.
    """
    try:
        async with session.get(url, timeout=10) as response:
            if response.status == 200:
                print(f"\n‚úîÔ∏è Dominio v√°lido: {url}", end="")
                valid_urls.append(url)
            else:
                print(f"‚ùå", end="")
    except asyncio.TimeoutError:
        # Ignorar el error de Timeout y pasar al siguiente
        print(f"‚è≥", end="")
    except aiohttp.ClientError:
        # Manejar otros errores de cliente
        print(f"‚ùå", end="")

async def is_video_url_valid(video_url, session):
    """
    Verifica si una URL de video es v√°lida y no contiene mensajes de error como "Wrong IP" o "Expired".
    
    Args:
        video_url (str): La URL del video a verificar.
        session (aiohttp.ClientSession): La sesi√≥n de aiohttp.

    Returns:
        bool: True si es un video v√°lido, False en caso contrario.
    """
    try:
        async with session.get(video_url, timeout=100) as response:
            if response.status == 200:
                content = await response.text()
                if "wrong ip" in content.lower() or "expired" in content.lower():
                    print(f"‚ö†Ô∏è", end="")
                    return False
                return True
            print(f"‚ùå", end="")
            return False
    except asyncio.TimeoutError:
        # Ignorar el error de Timeout y pasar al siguiente
        print(f"‚è≥", end="")
        return False
    except aiohttp.ClientError as e:
        # Manejar otros errores de cliente
        print(f"‚ùå", end="")
        return False

async def check_video_urls(valid_domains, attempts_per_domain=100000, session=None):
    """
    Realiza un barrido por una cantidad limitada de combinaciones de URLs con una cadena de longitud 60
    seguida de `/v.mp4`.
    
    Args:
        valid_domains (list): Lista de dominios v√°lidos.
        attempts_per_domain (int): N√∫mero de intentos por dominio.
        session (aiohttp.ClientSession): La sesi√≥n de aiohttp.
        
    Returns:
        dict: Un diccionario con las URLs v√°lidas encontradas por dominio.
    """
    valid_video_urls = {}
    total_attempts = 0

    for domain in valid_domains:
        print(f"\nüîç Buscando en: {domain}")
        found_urls = []

        # Generar un n√∫mero limitado de combinaciones
        combinations = await generate_combinations(num_combinations=attempts_per_domain)

        # Generar nuevas tareas para cada combinaci√≥n, evitando reutilizar tareas ya esperadas
        tasks = []  # Se crea un nuevo contenedor para las tareas en cada dominio
        for combination in combinations:
            video_url = f"{domain}/" + combination + "/v.mp4"
            tasks.append(check_video_url(video_url, found_urls, session))

            total_attempts += 1  # Incrementar el contador de intentos
            
            # Imprimir una marca cada 1000 intentos, mostrando el √∫ltimo enlace procesado
            if total_attempts % 100000 == 0:
                print(f"üîÑ Marcador: Se han realizado {total_attempts} b√∫squedas. √öltimo enlace procesado: {video_url}")

        # Esperar a que se completen todas las tareas
        await asyncio.gather(*tasks)
        if found_urls:
            valid_video_urls[domain] = found_urls
    
    return valid_video_urls

async def check_video_url(video_url, found_urls, session):
    """
    Verifica si una URL de video es v√°lida y la agrega a la lista de encontrados.

    Args:
        video_url (str): La URL del video a verificar.
        found_urls (list): La lista de URLs v√°lidas encontradas.
        session (aiohttp.ClientSession): La sesi√≥n de aiohttp.
    """
    if await is_video_url_valid(video_url, session):
        print(f"‚úîÔ∏è Video v√°lido encontrado: {video_url}")
        found_urls.append(video_url)

async def main():
    # Configuraci√≥n inicial
    base_url = "https://sXX.gamovideo.com"
    start = 19
    end = 35
    attempts_per_domain = 100000  # N√∫mero de intentos por dominio

    # Crear una sesi√≥n de aiohttp
    async with aiohttp.ClientSession() as session:
        # Paso 1: Buscar dominios v√°lidos
        print("üîé Buscando dominios v√°lidos...")
        valid_domains = await check_valid_domains(base_url, start, end, session=session)

        # Paso 2: Buscar videos v√°lidos en cada dominio
        if valid_domains:
            print("\nüéØ Dominios v√°lidos encontrados. Buscando videos...")
            valid_video_urls = await check_video_urls(valid_domains, attempts_per_domain, session=session)

            # Mostrar resultados
            print("\nüé• Videos v√°lidos encontrados:")
            for domain, urls in valid_video_urls.items():
                print(f"\nDominio: {domain}")
                for url in urls:
                    print(url)
        else:
            print("\n‚ùå No se encontraron dominios v√°lidos.")

# Ejecutar el script as√≠ncrono
if __name__ == "__main__":
    asyncio.run(main())
